name: CI/CD - Build and Release

# Trigger only on new version tags to avoid unnecessary builds
on:
  push:
    tags:
      - 'v*.*.*'  # Matches v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual trigger for testing

# Required permissions for creating releases
permissions:
  contents: write
  packages: write
  actions: read

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  WAILS_VERSION: 'v2.10.1'

jobs:
  # Build job for multiple platforms with UPX optimization
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - platform: windows-amd64
            os: windows-latest
            goos: windows
            goarch: amd64
            extension: .exe
            upx_args: --best --lzma
          - platform: windows-arm64
            os: windows-latest
            goos: windows
            goarch: arm64
            extension: .exe
            upx_args: --best --lzma

          # macOS builds
          - platform: darwin-amd64
            os: macos-latest
            goos: darwin
            goarch: amd64
            extension: ''
            upx_args: --best
          - platform: darwin-arm64
            os: macos-latest
            goos: darwin
            goarch: arm64
            extension: ''
            upx_args: --best

          # Linux builds
          - platform: linux-amd64
            os: ubuntu-latest
            goos: linux
            goarch: amd64
            extension: ''
            upx_args: --best --lzma
          - platform: linux-arm64
            os: ubuntu-latest
            goos: linux
            goarch: arm64
            extension: ''
            upx_args: --best --lzma

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Setup pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      # Get pnpm store directory
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # Setup pnpm cache
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      # Install Wails
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@${{ env.WAILS_VERSION }}

      # Get version from tag
      - name: Get version
        id: version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            # Remove 'v' prefix for semver validation in config.ini
            SEMVER_VERSION=${VERSION#v}
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
            SEMVER_VERSION="$VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "semver_version=$SEMVER_VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Semver Version: $SEMVER_VERSION"

      # Create configuration file for build from GitHub Variables
      - name: Create configuration file
        shell: bash
        run: |
          cat > config.ini << 'EOF'
          # Application Configuration
          # This file contains configuration values for the application
          # The APP_ENV environment variable determines which settings to use

          [app]
          # Application Environment
          environment = production
          name = CSmart
          version = ${{ steps.version.outputs.semver_version }}
          debug = false

          [api]
          # API Configuration
          base_url = https://your-api-domain.com/api/v3.1
          timeout = 30
          retry_count = 3
          retry_delay = 1000
          user_agent = CSmart-Wails/1.0
          max_idle_conn = 10

          [auth]
          # Authentication
          token_expiry = 3600
          refresh_threshold = 300
          max_login_attempts = 5
          lockout_duration = 900
          session_timeout = 86400
          remember_me_duration = 2592000

          [log]
          # Logging
          level = info
          format = json
          output = console
          file_path = logs/app.log
          max_size = 100
          max_backups = 3
          max_age = 28
          compress = true

          [database]
          # Database (if needed in future)
          host = localhost
          port = 5432
          name = csmart_prod
          username =
          password =
          ssl_mode = require
          max_open_conns = 25
          max_idle_conns = 5
          conn_lifetime = 300

          [security]
          # Security
          cors_enabled = true
          cors_origins = https://yourdomain.com
          rate_limit_enabled = true
          rate_limit_rps = 100
          rate_limit_burst = 200
          csrf_enabled = true
          csrf_secret =

          [window]
          # Window Configuration
          width = 1200
          height = 800
          resizable = true
          fullscreen = false
          maximized = false
          minimized = false
          always_on_top = false

          [cache]
          # Performance (production)
          enabled = true
          ttl = 3600
          max_size = 100
          max_items = 10000
          compression_enabled = true
          eviction_policy = lru

          [development]
          # Development specific (disabled in production)
          hot_reload = false
          dev_tools = false
          mock_api = false
          EOF

          # Cross-platform sed function
          update_config() {
            local pattern="$1"
            local replacement="$2"
            if [[ "$OSTYPE" == "darwin"* ]]; then
              # macOS (BSD sed)
              sed -i '' "s#${pattern}#${replacement}#" config.ini
            else
              # Linux and Windows (GNU sed)
              sed -i "s#${pattern}#${replacement}#" config.ini
            fi
          }

          # Override with GitHub Variables if they exist
          [ -n "${{ vars.APP_NAME }}" ] && update_config "name = .*" "name = ${{ vars.APP_NAME }}"
          [ -n "${{ vars.APP_DEBUG }}" ] && update_config "debug = .*" "debug = ${{ vars.APP_DEBUG }}"
          [ -n "${{ vars.API_BASE_URL }}" ] && update_config "base_url = .*" "base_url = ${{ vars.API_BASE_URL }}"
          [ -n "${{ vars.API_TIMEOUT }}" ] && update_config "timeout = .*" "timeout = ${{ vars.API_TIMEOUT }}"
          [ -n "${{ vars.API_RETRY_COUNT }}" ] && update_config "retry_count = .*" "retry_count = ${{ vars.API_RETRY_COUNT }}"
          [ -n "${{ vars.API_RETRY_DELAY }}" ] && update_config "retry_delay = .*" "retry_delay = ${{ vars.API_RETRY_DELAY }}"
          [ -n "${{ vars.AUTH_TOKEN_EXPIRY }}" ] && update_config "token_expiry = .*" "token_expiry = ${{ vars.AUTH_TOKEN_EXPIRY }}"
          [ -n "${{ vars.AUTH_REFRESH_THRESHOLD }}" ] && update_config "refresh_threshold = .*" "refresh_threshold = ${{ vars.AUTH_REFRESH_THRESHOLD }}"
          [ -n "${{ vars.LOG_LEVEL }}" ] && update_config "level = .*" "level = ${{ vars.LOG_LEVEL }}"
          [ -n "${{ vars.LOG_FORMAT }}" ] && update_config "format = .*" "format = ${{ vars.LOG_FORMAT }}"
          [ -n "${{ vars.LOG_OUTPUT }}" ] && update_config "output = .*" "output = ${{ vars.LOG_OUTPUT }}"
          [ -n "${{ vars.WINDOW_WIDTH }}" ] && update_config "width = .*" "width = ${{ vars.WINDOW_WIDTH }}"
          [ -n "${{ vars.WINDOW_HEIGHT }}" ] && update_config "height = .*" "height = ${{ vars.WINDOW_HEIGHT }}"
          [ -n "${{ vars.WINDOW_RESIZABLE }}" ] && update_config "resizable = .*" "resizable = ${{ vars.WINDOW_RESIZABLE }}"
          [ -n "${{ vars.WINDOW_FULLSCREEN }}" ] && update_config "fullscreen = .*" "fullscreen = ${{ vars.WINDOW_FULLSCREEN }}"
          [ -n "${{ vars.CORS_ENABLED }}" ] && update_config "cors_enabled = .*" "cors_enabled = ${{ vars.CORS_ENABLED }}"
          [ -n "${{ vars.CORS_ORIGINS }}" ] && update_config "cors_origins = .*" "cors_origins = ${{ vars.CORS_ORIGINS }}"
          [ -n "${{ vars.RATE_LIMIT_ENABLED }}" ] && update_config "rate_limit_enabled = .*" "rate_limit_enabled = ${{ vars.RATE_LIMIT_ENABLED }}"

          echo "Generated config.ini file:"
          cat config.ini

      # Set up QEMU for ARM64 emulation
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest' && matrix.goarch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Install Linux dependencies for Wails
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update

          # Install base dependencies
          sudo apt-get install -y \
            pkg-config \
            build-essential

          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            echo "Setting up ARM64 with QEMU emulation..."

            # For ARM64, we'll use Docker with QEMU emulation
            echo "ARM64_BUILD=true" >> $GITHUB_ENV

          else
            echo "Setting up AMD64 native compilation..."

            # Install native libraries
            sudo apt-get install -y \
              libgtk-3-dev \
              libwebkit2gtk-4.0-dev || \
              sudo apt-get install -y libwebkit2gtk-4.1-dev

            # Create symlink if needed for compatibility
            if [ ! -f /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc ] && [ -f /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc ]; then
              sudo ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc
            fi
          fi

      # Install UPX for binary compression
      - name: Install UPX (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-win64.zip" -OutFile "upx.zip"
          Expand-Archive -Path "upx.zip" -DestinationPath "."
          Move-Item "upx-4.2.1-win64\upx.exe" "upx.exe"
          echo "$PWD" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install UPX (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install upx

      - name: Install UPX (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y upx

      # Build with Wails
      - name: Build application
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          if [ "${{ matrix.goarch }}" = "arm64" ] && [ "${{ matrix.goos }}" = "linux" ]; then
            echo "Building Linux ARM64 with Docker + QEMU..."

            # Create Dockerfile for ARM64 build
            cat > Dockerfile.arm64 << 'EOF'
          FROM --platform=linux/arm64 ubuntu:24.04

          # Install dependencies
          RUN apt-get update && apt-get install -y \
              curl \
              build-essential \
              pkg-config \
              libgtk-3-dev \
              libwebkit2gtk-4.1-dev \
              && rm -rf /var/lib/apt/lists/*

          # Install Go
          RUN curl -L https://go.dev/dl/go1.21.13.linux-arm64.tar.gz | tar -C /usr/local -xz
          ENV PATH="/usr/local/go/bin:$PATH"

          # Install Node.js
          RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
              apt-get install -y nodejs

          # Install pnpm
          RUN npm install -g pnpm

          # Install Wails
          RUN go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1

          WORKDIR /app
          COPY . .

          # Build frontend
          RUN cd frontend && pnpm install && pnpm build

          # Build application
          RUN wails build \
              -platform linux/arm64 \
              -clean \
              -ldflags "-s -w -X main.version=${{ steps.version.outputs.version }}" \
              -o "wails-template-${{ matrix.platform }}${{ matrix.extension }}"
          EOF

            # Build with Docker
            docker build --platform linux/arm64 -f Dockerfile.arm64 -t wails-arm64-builder .

            # Extract binary from container
            docker create --name temp-container wails-arm64-builder
            docker cp temp-container:/app/build/bin/. build/bin/
            docker rm temp-container

            # Clean up
            rm Dockerfile.arm64

          else
            echo "Building natively..."
            wails build \
              -platform ${{ matrix.goos }}/${{ matrix.goarch }} \
              -clean \
              -ldflags "-s -w -X main.version=${{ steps.version.outputs.version }}" \
              -o "wails-template-${{ matrix.platform }}${{ matrix.extension }}"
          fi

      # Optimize binary with UPX (skip for macOS arm64 due to compatibility issues)
      - name: Optimize binary with UPX
        if: matrix.platform != 'darwin-arm64'
        shell: bash
        run: |
          cd build/bin
          echo "Contents of build/bin directory:"
          ls -la

          # Find the actual binary file
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME=$(ls *.exe | head -1)
          else
            BINARY_NAME=$(ls | grep -v "\.exe$" | head -1)
          fi

          if [ -n "$BINARY_NAME" ] && [ -f "$BINARY_NAME" ]; then
            echo "Original size: $(du -h "$BINARY_NAME" | cut -f1)"
            upx ${{ matrix.upx_args }} "$BINARY_NAME" || echo "UPX compression failed, continuing with uncompressed binary"
            echo "Compressed size: $(du -h "$BINARY_NAME" | cut -f1)"
          else
            echo "Binary not found"
            echo "Available files:"
            ls -la
          fi

      # Create release archive
      - name: Create release archive
        shell: bash
        run: |
          cd build/bin
          echo "Contents of build/bin directory:"
          ls -la

          # Find the actual binary file
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME=$(ls *.exe | head -1)
          else
            BINARY_NAME=$(ls | grep -v "\.exe$" | head -1)
          fi

          if [ -z "$BINARY_NAME" ]; then
            echo "No binary found in build/bin"
            exit 1
          fi

          echo "Found binary: $BINARY_NAME"
          ARCHIVE_NAME="wails-template-${{ steps.version.outputs.version }}-${{ matrix.platform }}"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "${ARCHIVE_NAME}.zip" "$BINARY_NAME"
            echo "archive=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" "$BINARY_NAME"
            echo "archive=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wails-template-${{ matrix.platform }}
          path: build/bin/${{ env.archive }}
          retention-days: 30

  # Release job - runs after all builds complete
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      # Checkout for release notes
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download all build artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Get version from tag
      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Generate release notes
      - name: Generate release notes
        id: release_notes
        run: |
          echo "## 🚀 Release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### 📦 Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "Choose the appropriate binary for your platform:" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Windows (x64)**: \`wails-template-${{ steps.version.outputs.version }}-windows-amd64.zip\`" >> release_notes.md
          echo "- **Windows (ARM64)**: \`wails-template-${{ steps.version.outputs.version }}-windows-arm64.zip\`" >> release_notes.md
          echo "- **macOS (Intel)**: \`wails-template-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz\`" >> release_notes.md
          echo "- **macOS (Apple Silicon)**: \`wails-template-${{ steps.version.outputs.version }}-darwin-arm64.tar.gz\`" >> release_notes.md
          echo "- **Linux (x64)**: \`wails-template-${{ steps.version.outputs.version }}-linux-amd64.tar.gz\`" >> release_notes.md
          echo "- **Linux (ARM64)**: \`wails-template-${{ steps.version.outputs.version }}-linux-arm64.tar.gz\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### ✨ Features" >> release_notes.md
          echo "" >> release_notes.md
          echo "- 🔐 Authentication system with login/logout" >> release_notes.md
          echo "- ⚙️ Environment configuration management" >> release_notes.md
          echo "- 🎨 Modern UI with shadcn/ui components" >> release_notes.md
          echo "- 🚀 Production-ready Wails template" >> release_notes.md
          echo "- 📦 UPX-optimized binaries for smaller size" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 Technical Details" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Go Version**: ${{ env.GO_VERSION }}" >> release_notes.md
          echo "- **Wails Version**: ${{ env.WAILS_VERSION }}" >> release_notes.md
          echo "- **Node.js Version**: ${{ env.NODE_VERSION }}" >> release_notes.md
          echo "- **Compression**: UPX optimized for reduced file size" >> release_notes.md

      # Create GitHub release
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            artifacts/*/wails-template-${{ steps.version.outputs.version }}-*.zip
            artifacts/*/wails-template-${{ steps.version.outputs.version }}-*.tar.gz

      # Notify on success
      - name: Notify success
        run: |
          echo "✅ Release ${{ steps.version.outputs.version }} created successfully!"
          echo "📦 Artifacts uploaded and ready for download"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
